'use client'

import { useEffect, useState, Fragment } from 'react'
import { Header } from '@/components/layout/Header'
import { Card } from '@/components/ui/Card'
import { BalanceChart } from '@/components/charts/BalanceChart'
import { DistributionChart } from '@/components/charts/DistributionChart'
import { formatCurrency, formatDate, normalizeBalanceData } from '@/lib/utils'
import { BalanceRecord } from '@/lib/types'
import { ChevronDown, ChevronRight, Calendar } from 'lucide-react'

export default function TotalsPage() {
  const [allData, setAllData] = useState<BalanceRecord[]>([])
  const [selectedIndex, setSelectedIndex] = useState(0)
  const [loading, setLoading] = useState(true)
  const [expandedRows, setExpandedRows] = useState<Set<number>>(new Set())

  const toggleRow = (index: number) => {
    const newExpanded = new Set(expandedRows)
    if (newExpanded.has(index)) {
      newExpanded.delete(index)
    } else {
      newExpanded.add(index)
    }
    setExpandedRows(newExpanded)
  }

  // Función para formatear la fecha en español
  const formatSpanishDate = (dateString: string): string => {
    const date = new Date(dateString)
    const months = [
      'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
      'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
    ]
    const day = date.getDate()
    const month = months[date.getMonth()]
    const year = date.getFullYear()
    return `${day} de ${month}, ${year}`
  }

  useEffect(() => {
    async function fetchData() {
      try {
        const res = await fetch('/api/data/totals')
        const result = await res.json()
        if (result.success && result.data.length > 0) {
          setAllData(result.data)
        }
      } catch (error) {
        console.error('Error fetching totals:', error)
      } finally {
        setLoading(false)
      }
    }
    fetchData()
  }, [])

  if (loading) {
    return (
      <div>
        <Header title='Balance Totals' subtitle='Cargando datos...' />
        <div className='flex items-center justify-center h-96'>
          <div className='text-gray-500'>Cargando...</div>
        </div>
      </div>
    )
  }

  if (!allData || allData.length === 0) {
    return (
      <div>
        <Header title='Balance Totals' subtitle='No hay datos disponibles' />
        <div className='flex items-center justify-center h-96'>
          <div className='text-gray-500'>No se encontraron datos</div>
        </div>
      </div>
    )
  }

  const data = allData[selectedIndex]

  return (
    <div className="min-h-screen">
      <Header
        title='Balance Totals'
        subtitle={'Fecha: ' + formatDate(data.date)}
      />

      <div className='p-4 sm:p-6 lg:p-8 space-y-6 sm:space-y-8'>
        {/* Selector de Fechas - SIEMPRE VISIBLE */}
        <Card>
          <div className='flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4'>
            <div className='flex items-center gap-2'>
              <Calendar className='h-5 w-5 text-blue-600' />
              <label className='text-sm font-medium text-gray-700'>
                Seleccionar Fecha del Balance:
              </label>
            </div>
            <select
              value={selectedIndex}
              onChange={(e) => setSelectedIndex(Number(e.target.value))}
              className='w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900 text-sm font-medium shadow-sm hover:border-gray-400 transition-colors'
            >
              {allData.map((record, idx) => (
                <option key={idx} value={idx}>
                  {formatSpanishDate(record.date)}
                  {idx === 0 ? ' (Más reciente)' : ''}
                </option>
              ))}
            </select>
          </div>
          {allData.length > 1 && (
            <div className='mt-2 text-xs text-gray-500'>
              {allData.length} fechas disponibles en el histórico
            </div>
          )}
        </Card>

        {/* Summary Cards */}
        <div className='grid grid-cols-1 gap-4 sm:gap-6 sm:grid-cols-2 lg:grid-cols-3'>
          <Card title='Total Registros'>
            <p className='text-3xl font-bold text-gray-900'>{data.recordCount}</p>
          </Card>
          <Card title='Fecha de Datos'>
            <p className='text-3xl font-bold text-gray-900'>{formatDate(data.date, 'dd/MM/yyyy')}</p>
          </Card>
          <Card title='Última Actualización'>
            <p className='text-lg font-bold text-gray-900'>
              {new Date(data.insertedAt).toLocaleString('es-CL')}
            </p>
          </Card>
        </div>

        {/* Charts */}
        <div className='grid grid-cols-1 gap-4 sm:gap-6 xl:grid-cols-2'>
          <BalanceChart
            data={data.data.map(normalizeBalanceData)}
            title='Top 10 Cuentas'
            subtitle='Debe vs Haber'
          />
          <DistributionChart
            data={data.data.map(normalizeBalanceData)}
            title='Distribución de Balance'
            subtitle='Top 6 cuentas por balance'
          />
        </div>

        {/* Data Table - 6 COLUMNAS (solo datos de DB) */}
        <Card title='Detalle de Cuentas' subtitle={'Total: ' + data.recordCount + ' registros'}>
          <div className='overflow-x-auto -mx-4 sm:mx-0'>
            <div className='inline-block min-w-full align-middle'>
              <table className='min-w-full divide-y divide-gray-200'>
                <thead className='bg-gray-50'>
                  <tr>
                    <th className='hidden md:table-cell px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>
                      Código
                    </th>
                    <th className='hidden md:table-cell px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>
                      Nombre de Cuenta
                    </th>
                    <th className='hidden md:table-cell px-2 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider'>
                      Debe
                    </th>
                    <th className='hidden md:table-cell px-2 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider'>
                      Haber
                    </th>
                    <th className='hidden md:table-cell px-2 py-2 text-right text-xs font-medium text-blue-600 uppercase tracking-wider'>
                      Bal. Deudor
                    </th>
                    <th className='hidden md:table-cell px-2 py-2 text-right text-xs font-medium text-red-600 uppercase tracking-wider'>
                      Bal. Acreedor
                    </th>
                    <th className='md:hidden px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'>
                      Cuenta
                    </th>
                  </tr>
                </thead>
                <tbody className='bg-white divide-y divide-gray-200'>
                  {data.data.map(normalizeBalanceData).map((row, index) => (
                    <Fragment key={index}>
                      {/* Fila principal */}
                      <tr className='hover:bg-gray-50'>
                        {/* Desktop: TODAS las 6 columnas (solo DB) */}
                        <td className='hidden md:table-cell px-2 py-3 whitespace-nowrap text-xs font-medium text-gray-900'>
                          {row.accountCode}
                        </td>
                        <td className='hidden md:table-cell px-2 py-3 text-xs text-gray-900'>
                          {row.accountName}
                        </td>
                        <td className='hidden md:table-cell px-2 py-3 whitespace-nowrap text-xs text-right text-gray-900'>
                          {formatCurrency(row.debit || 0)}
                        </td>
                        <td className='hidden md:table-cell px-2 py-3 whitespace-nowrap text-xs text-right text-gray-900'>
                          {formatCurrency(row.credit || 0)}
                        </td>
                        <td className='hidden md:table-cell px-2 py-3 whitespace-nowrap text-xs text-right text-blue-700 font-medium'>
                          {formatCurrency(row.debitBalance || 0)}
                        </td>
                        <td className='hidden md:table-cell px-2 py-3 whitespace-nowrap text-xs text-right text-red-700 font-medium'>
                          {formatCurrency(row.creditBalance || 0)}
                        </td>

                        {/* Mobile: Solo Código-Nombre clickeable */}
                        <td 
                          className='md:hidden px-4 py-4 cursor-pointer'
                          onClick={() => toggleRow(index)}
                        >
                          <div className='flex items-center justify-between'>
                            <div className='flex-1 min-w-0'>
                              <div className='text-sm font-medium text-gray-900'>
                                {row.accountCode} - {row.accountName}
                              </div>
                            </div>
                            <div className='ml-3 flex-shrink-0'>
                              {expandedRows.has(index) ? (
                                <ChevronDown className='h-5 w-5 text-gray-400' />
                              ) : (
                                <ChevronRight className='h-5 w-5 text-gray-400' />
                              )}
                            </div>
                          </div>
                        </td>
                      </tr>

                      {/* Fila expandida (solo mobile) - TODAS las 6 columnas */}
                      {expandedRows.has(index) && (
                        <tr key={`expanded-${index}`} className='md:hidden bg-gray-50'>
                          <td colSpan={7} className='px-4 py-4'>
                            <div className='space-y-2 text-sm'>
                              <div className='flex justify-between items-center'>
                                <span className='text-gray-600 font-medium'>Código:</span>
                                <span className='text-gray-900 font-semibold'>{row.accountCode}</span>
                              </div>
                              <div className='flex justify-between items-center'>
                                <span className='text-gray-600 font-medium'>Nombre:</span>
                                <span className='text-gray-900 text-right'>{row.accountName}</span>
                              </div>
                              <div className='border-t border-gray-200 my-2'></div>
                              <div className='flex justify-between items-center'>
                                <span className='text-gray-600 font-medium'>Debe:</span>
                                <span className='text-gray-900'>{formatCurrency(row.debit || 0)}</span>
                              </div>
                              <div className='flex justify-between items-center'>
                                <span className='text-gray-600 font-medium'>Haber:</span>
                                <span className='text-gray-900'>{formatCurrency(row.credit || 0)}</span>
                              </div>
                              <div className='border-t-2 border-gray-300 my-3'></div>
                              <div className='flex justify-between items-center'>
                                <span className='text-blue-700 font-medium'>Balance Deudor:</span>
                                <span className='text-blue-700 font-semibold'>{formatCurrency(row.debitBalance || 0)}</span>
                              </div>
                              <div className='flex justify-between items-center'>
                                <span className='text-red-700 font-medium'>Balance Acreedor:</span>
                                <span className='text-red-700 font-semibold'>{formatCurrency(row.creditBalance || 0)}</span>
                              </div>
                            </div>
                          </td>
                        </tr>
                      )}
                    </Fragment>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </Card>
      </div>
    </div>
  )
}
